// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	v1beta1 "github.com/easysoft/quickon-api/qucheng/v1beta1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeRestoreSets implements RestoreSetInterface
type FakeRestoreSets struct {
	Fake *FakeQuchengV1beta1
	ns   string
}

var restoresetsResource = schema.GroupVersionResource{Group: "qucheng", Version: "v1beta1", Resource: "restoresets"}

var restoresetsKind = schema.GroupVersionKind{Group: "qucheng", Version: "v1beta1", Kind: "RestoreSet"}

// Get takes name of the restoreSet, and returns the corresponding restoreSet object, and an error if there is any.
func (c *FakeRestoreSets) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1beta1.RestoreSet, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(restoresetsResource, c.ns, name), &v1beta1.RestoreSet{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.RestoreSet), err
}

// List takes label and field selectors, and returns the list of RestoreSets that match those selectors.
func (c *FakeRestoreSets) List(ctx context.Context, opts v1.ListOptions) (result *v1beta1.RestoreSetList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(restoresetsResource, restoresetsKind, c.ns, opts), &v1beta1.RestoreSetList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1beta1.RestoreSetList{ListMeta: obj.(*v1beta1.RestoreSetList).ListMeta}
	for _, item := range obj.(*v1beta1.RestoreSetList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested restoreSets.
func (c *FakeRestoreSets) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(restoresetsResource, c.ns, opts))

}

// Create takes the representation of a restoreSet and creates it.  Returns the server's representation of the restoreSet, and an error, if there is any.
func (c *FakeRestoreSets) Create(ctx context.Context, restoreSet *v1beta1.RestoreSet, opts v1.CreateOptions) (result *v1beta1.RestoreSet, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(restoresetsResource, c.ns, restoreSet), &v1beta1.RestoreSet{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.RestoreSet), err
}

// Update takes the representation of a restoreSet and updates it. Returns the server's representation of the restoreSet, and an error, if there is any.
func (c *FakeRestoreSets) Update(ctx context.Context, restoreSet *v1beta1.RestoreSet, opts v1.UpdateOptions) (result *v1beta1.RestoreSet, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(restoresetsResource, c.ns, restoreSet), &v1beta1.RestoreSet{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.RestoreSet), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeRestoreSets) UpdateStatus(ctx context.Context, restoreSet *v1beta1.RestoreSet, opts v1.UpdateOptions) (*v1beta1.RestoreSet, error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateSubresourceAction(restoresetsResource, "status", c.ns, restoreSet), &v1beta1.RestoreSet{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.RestoreSet), err
}

// Delete takes name of the restoreSet and deletes it. Returns an error if one occurs.
func (c *FakeRestoreSets) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteActionWithOptions(restoresetsResource, c.ns, name, opts), &v1beta1.RestoreSet{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeRestoreSets) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(restoresetsResource, c.ns, listOpts)

	_, err := c.Fake.Invokes(action, &v1beta1.RestoreSetList{})
	return err
}

// Patch applies the patch and returns the patched restoreSet.
func (c *FakeRestoreSets) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1beta1.RestoreSet, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(restoresetsResource, c.ns, name, pt, data, subresources...), &v1beta1.RestoreSet{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.RestoreSet), err
}
