// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/easysoft/quickon-api/qucheng/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// BackupSetLister helps list BackupSets.
// All objects returned here must be treated as read-only.
type BackupSetLister interface {
	// List lists all BackupSets in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.BackupSet, err error)
	// BackupSets returns an object that can list and get BackupSets.
	BackupSets(namespace string) BackupSetNamespaceLister
	BackupSetListerExpansion
}

// backupSetLister implements the BackupSetLister interface.
type backupSetLister struct {
	indexer cache.Indexer
}

// NewBackupSetLister returns a new BackupSetLister.
func NewBackupSetLister(indexer cache.Indexer) BackupSetLister {
	return &backupSetLister{indexer: indexer}
}

// List lists all BackupSets in the indexer.
func (s *backupSetLister) List(selector labels.Selector) (ret []*v1beta1.BackupSet, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.BackupSet))
	})
	return ret, err
}

// BackupSets returns an object that can list and get BackupSets.
func (s *backupSetLister) BackupSets(namespace string) BackupSetNamespaceLister {
	return backupSetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// BackupSetNamespaceLister helps list and get BackupSets.
// All objects returned here must be treated as read-only.
type BackupSetNamespaceLister interface {
	// List lists all BackupSets in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.BackupSet, err error)
	// Get retrieves the BackupSet from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1beta1.BackupSet, error)
	BackupSetNamespaceListerExpansion
}

// backupSetNamespaceLister implements the BackupSetNamespaceLister
// interface.
type backupSetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all BackupSets in the indexer for a given namespace.
func (s backupSetNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.BackupSet, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.BackupSet))
	})
	return ret, err
}

// Get retrieves the BackupSet from the indexer for a given namespace and name.
func (s backupSetNamespaceLister) Get(name string) (*v1beta1.BackupSet, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("backupset"), name)
	}
	return obj.(*v1beta1.BackupSet), nil
}
