/*
Copyright 2022.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/easysoft/qucheng-operator/apis/qucheng/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DbDumpReplicaLister helps list DbDumpReplicas.
// All objects returned here must be treated as read-only.
type DbDumpReplicaLister interface {
	// List lists all DbDumpReplicas in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.DbDumpReplica, err error)
	// DbDumpReplicas returns an object that can list and get DbDumpReplicas.
	DbDumpReplicas(namespace string) DbDumpReplicaNamespaceLister
	DbDumpReplicaListerExpansion
}

// dbDumpReplicaLister implements the DbDumpReplicaLister interface.
type dbDumpReplicaLister struct {
	indexer cache.Indexer
}

// NewDbDumpReplicaLister returns a new DbDumpReplicaLister.
func NewDbDumpReplicaLister(indexer cache.Indexer) DbDumpReplicaLister {
	return &dbDumpReplicaLister{indexer: indexer}
}

// List lists all DbDumpReplicas in the indexer.
func (s *dbDumpReplicaLister) List(selector labels.Selector) (ret []*v1beta1.DbDumpReplica, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.DbDumpReplica))
	})
	return ret, err
}

// DbDumpReplicas returns an object that can list and get DbDumpReplicas.
func (s *dbDumpReplicaLister) DbDumpReplicas(namespace string) DbDumpReplicaNamespaceLister {
	return dbDumpReplicaNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DbDumpReplicaNamespaceLister helps list and get DbDumpReplicas.
// All objects returned here must be treated as read-only.
type DbDumpReplicaNamespaceLister interface {
	// List lists all DbDumpReplicas in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.DbDumpReplica, err error)
	// Get retrieves the DbDumpReplica from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1beta1.DbDumpReplica, error)
	DbDumpReplicaNamespaceListerExpansion
}

// dbDumpReplicaNamespaceLister implements the DbDumpReplicaNamespaceLister
// interface.
type dbDumpReplicaNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DbDumpReplicas in the indexer for a given namespace.
func (s dbDumpReplicaNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.DbDumpReplica, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.DbDumpReplica))
	})
	return ret, err
}

// Get retrieves the DbDumpReplica from the indexer for a given namespace and name.
func (s dbDumpReplicaNamespaceLister) Get(name string) (*v1beta1.DbDumpReplica, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("dbdumpreplica"), name)
	}
	return obj.(*v1beta1.DbDumpReplica), nil
}
