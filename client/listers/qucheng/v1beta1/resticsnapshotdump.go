/*
Copyright 2022.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/easysoft/qucheng-operator/apis/qucheng/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ResticSnapshotDumpLister helps list ResticSnapshotDumps.
// All objects returned here must be treated as read-only.
type ResticSnapshotDumpLister interface {
	// List lists all ResticSnapshotDumps in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.ResticSnapshotDump, err error)
	// ResticSnapshotDumps returns an object that can list and get ResticSnapshotDumps.
	ResticSnapshotDumps(namespace string) ResticSnapshotDumpNamespaceLister
	ResticSnapshotDumpListerExpansion
}

// resticSnapshotDumpLister implements the ResticSnapshotDumpLister interface.
type resticSnapshotDumpLister struct {
	indexer cache.Indexer
}

// NewResticSnapshotDumpLister returns a new ResticSnapshotDumpLister.
func NewResticSnapshotDumpLister(indexer cache.Indexer) ResticSnapshotDumpLister {
	return &resticSnapshotDumpLister{indexer: indexer}
}

// List lists all ResticSnapshotDumps in the indexer.
func (s *resticSnapshotDumpLister) List(selector labels.Selector) (ret []*v1beta1.ResticSnapshotDump, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.ResticSnapshotDump))
	})
	return ret, err
}

// ResticSnapshotDumps returns an object that can list and get ResticSnapshotDumps.
func (s *resticSnapshotDumpLister) ResticSnapshotDumps(namespace string) ResticSnapshotDumpNamespaceLister {
	return resticSnapshotDumpNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ResticSnapshotDumpNamespaceLister helps list and get ResticSnapshotDumps.
// All objects returned here must be treated as read-only.
type ResticSnapshotDumpNamespaceLister interface {
	// List lists all ResticSnapshotDumps in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.ResticSnapshotDump, err error)
	// Get retrieves the ResticSnapshotDump from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1beta1.ResticSnapshotDump, error)
	ResticSnapshotDumpNamespaceListerExpansion
}

// resticSnapshotDumpNamespaceLister implements the ResticSnapshotDumpNamespaceLister
// interface.
type resticSnapshotDumpNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ResticSnapshotDumps in the indexer for a given namespace.
func (s resticSnapshotDumpNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.ResticSnapshotDump, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.ResticSnapshotDump))
	})
	return ret, err
}

// Get retrieves the ResticSnapshotDump from the indexer for a given namespace and name.
func (s resticSnapshotDumpNamespaceLister) Get(name string) (*v1beta1.ResticSnapshotDump, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("resticsnapshotdump"), name)
	}
	return obj.(*v1beta1.ResticSnapshotDump), nil
}
